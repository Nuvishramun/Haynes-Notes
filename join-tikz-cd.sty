%%
%% Join-tikz-cd
%%
%% A package to horizontally concatenate tikz-cd diagrams.
%% Hopefully should make diagram maitenence easier.
%% If vertical joins seem like they will be useful, I may at some point add them.
%%
%% It might be nice at some point to hand code the environ functionality I need, to reduce the dependencies
%%

\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{join-tikz-cd}
\RequirePackage{tikz-cd}
\RequirePackage{environ}
\RequirePackage{etoolbox}

\let\@xp\expandafter
\let\@nx\noexpand
\let\@ag\aftergroup

%% From TUGBoat Volume 22 (2001), No. 4
%% https://www.tug.org/TUGboat/tb22-4/tb72perlS.pdf
%%

\def\clap#1{\hbox to 0pt{\hss#1\hss}}
\def\mathllap{\mathpalette\mathllapinternal}
\def\mathrlap{\mathpalette\mathrlapinternal}
\def\mathclap{\mathpalette\mathclapinternal}
\def\mathllapinternal#1#2{\llap{$\mathsurround=0pt#1{#2}$}}
\def\mathrlapinternal#1#2{\rlap{$\mathsurround=0pt#1{#2}$}}
\def\mathclapinternal#1#2{\clap{$\mathsurround=0pt#1{#2}$}}


\newbox\tempbox
\def\clapph#1#2{\sbox\tempbox{#1}\hbox to \wd\tempbox{\hss#2\hss}}
\def\mathclapph#1#2{\mathpalette\mathclapph@{{#1}{#2}}}
\def\mathclapph@#1#2{\clapph{$\mathsurround=0pt#1{\@firstoftwo#2}$}{$\mathsurround=0pt#1{\@secondoftwo#2}$}}

%%
%%

\newtoks\ctikzcdphantomleft
\newtoks\ctikzcdphantomright
\def\edgellap#1{\mathllap{#1{}}\global\ctikzcdphantomleft={\sbox\tempbox{$#1{}$}\wd\tempbox=-\wd\tempbox\hbox to \wd\tempbox{}}}%\hskip\wd\tempbox}}
\def\edgerlap#1{\mathrlap{{}#1}\hskip-1ex\global\ctikzcdphantomright={\phantom{${}#1$}}}

\newenvironment{ctikzcd}{\begin{center}\tikzcd}{\endtikzcd\the\ctikzcdphantomleft\the\ctikzcdphantomright\global\ctikzcdphantomleft={}\global\ctikzcdphantomright={}\end{center}}

% I replaced this with a check using pgfmath to allow more general math in options, so this doesn't actually do anything right now.
% But this is such a neat little macro!
% Also a reminder for the future that \afterassignment is the "\@xp of assignment."
\newdimen\tempdimen
\def\isdimen#1{\afterassignment\isdimen@\tempdimen=#1em \@nil}
\def\isdimen@#1\@nil#2#3{\if!#1!\relax #3\else #2\fi}


%
%
%


% Intertext handling

% Redefine the arrow target parser from tikzcd so I can change the effect of u and d to go up or down two rows.
\newcount\jtcd@rowsperslash
\jtcd@rowsperslash=1

\def\tikzcd@parse#1{% parser for arrow direction argument
  \ifx#1r\advance\c@pgf@countb by1\else%
   \ifx#1d\advance\c@pgf@counta by\jtcd@rowsperslash\else%
    \ifx#1l\advance\c@pgf@countb by-1\else%
     \ifx#1u\advance\c@pgf@counta by-\jtcd@rowsperslash\else%
      \ifx#1\relax\let\tikzcd@temp\pgfutil@empty%
       \else\let\tikzcd@temp\pgfutil@gobble@until@relax\fi\fi\fi\fi\fi%
  \tikzcd@temp}


\newcount\jtcd@matrixnum
\newcount\jtcd@diagramnum
\patchcmd\tikzcd@{\matrix}{\global\advance\jtcd@matrixnum1\matrix(tikz@f@\jtcd@matrixname)}{}{}
\def\jtcd@matrixname{\the\jtcd@matrixnum}

\newdimen\jtcd@dim
\def\jtcd@intertext#1{|[inner sep=0pt]|\jtcd@dim=\pgfmatrixcolumnsep\divide\jtcd@dim2\hskip-\jtcd@dim\smash{\textup{#1}}\hskip-\jtcd@dim\relax}
% This is slightly horrible, but avoids any code duplication. There's probably a better way.
\@xp\def\@xp\jtcd@intertextslsl\@xp#\@xp1\@xp{\@xp\jtcd@cursl\jtcd@intertext{#1}\jtcd@cursl}


\tikzcdset{
    intertext/.code={ %
        \pgfmathsetmacro{\pgfmatrixrowsep}{\pgfmatrixrowsep/2}%
        \jtcd@rowsperslash=2 %
        \global\let\jtcd@cursl\pgfmatrixendrow %
        \def\pgfmatrixendrow{\jtcd@cursl\jtcd@cursl}%
        \let\intertext\jtcd@intertextslsl%
    }
}








% diagram sep

\tikzcdset{
    diagram sep/.code={\tikzcd@sep{diagram}{#1}\global\let\diagramsep\diagramsep},
    diagrams={/tikz/commutative diagrams/diagram sep=normal},
    diagram sep/huge/.initial=column sep/huge/,
    diagram sep/large/.initial=+3.6em,
    diagram sep/normal/.initial=+2.4em,
    diagram sep/scriptsize/.initial=+1.8em,
    diagram sep/small/.initial=+1.2em,
    diagram sep/tiny/.initial=+0.6em,
    /tikz/diagram sep/.store in=\diagramsep,
    display math/.style={nodes={execute at begin node=\everymath{\displaystyle}}},
    onto/.style={two heads},
    into/.style={hook},
    into'/.style={hook'}
}




%%%
%
%
%
%%%


\newcount\jtcd@maxamps
\newcount\jtcd@amps

\newtoks\jtcd@savedtoks
\newtoks\jtcd@columnskip
\newtoks\jtcd@rowskip

\newif\ifjtcd@newrow


% \@nil needs to have distinct expansion text so that \@ifnextchar can tell it apart from other macros
% Also, \@nil gets expanded if the environment is empty. Hence:
\def\jtcd@nil{\PackageError{join-tikz-cd}{There is probably an empty jointikzcd environment}{}}

\bgroup\lccode`~=`&\lowercase{

    \def\padamps{%
        \ifnum\jtcd@amps>\jtcd@maxamps % If there are more amps than maxamps
            \ifnum\jtcd@maxamps=-1     % If maxamps is -1,
                \global\jtcd@maxamps=\jtcd@amps  % we should use this row to decide how many amps should be in each row
            \else % Otherwise, the number of amps in this row should be less than or equal to maxamps!
                \PackageError{join-tikz-cd}{Either the top row must have the most columns or you must explicitly indicate how many columns are present in a subdiagram by saying \protect\diagram[n]}{}%
            \fi %
        \else % Pad the row with amps until there are maxamps of them.
            {
                \loop\ifnum\jtcd@amps<\jtcd@maxamps%
                    \@ag~ % For some reason, this throws an error without aftergroup. Probably because each ~ causes a ton of random stuff to happen.
                    \advance\jtcd@amps1%
                \repeat %
            } % all the aftergrouped ~'s show up here!
        \fi %
        \global\jtcd@amps=-1 % -1 so that after the extra ampersand is inserted separating this diagram from the next, \jtcd@amps=0.
    }

    \def\jtcdsl{\@ifnextchar[{\jtcdsl@}{\jtcdsl@@}} %} Handle optional space specifications e.g., \\[10em]
    \def\jtcdsl@[#1]{\global\jtcd@rowskip{[#1]}\jtcdsl@@}  % Perhaps I should give a warning if later \\'s override earlier ones?
    \def\jtcdsl@@#1\diagram{\global\jtcd@newrowtrue\jtcd@diagram@next{#1}}

    \def\jtcd@diagram@lastrow{\jtcd@diagram@next{}}% On the last row, there is no \\, so \diagram itself gets evaluated.
    \def\jtcd@diagram@next#1{
        \padamps %
        \edef\temp{\@nx\jtcd@savedtoks{\the\jtcd@savedtoks[\the\jtcd@maxamps]}}\temp %
        \@xp\global\@xp\jtcd@savedtoks\@xp{\the\jtcd@savedtoks#1\diagram} %
        \@ifnextchar\@nil % Was that just the last diagram?
            {\ifjtcd@newrow\global\jtcd@newrowfalse\@xp\jtcd@endrow\else\@xp\jtcd@cleanup\fi} % If so, we're done
            {\@ifnextchar[{\jtcd@continuerow}{\jtcd@continuerow[-1]}} %}
    }

    % The first diagram command always gets expanded, so to avoid confusing this with the last row, we replace it with \jtcd@startrow
    % Hopefully the user doesn't try to provide a dimen option to the first \diagram command? Why would they do that?
    \def\jtcd@startrow{\@ifnextchar[{\jtcd@startrow@}{\jtcd@startrow@[-1]}} %}
    \def\jtcd@startrow@[#1]{\global\jtcd@amps=0\global\jtcd@maxamps=#1\global\jtcd@savedtoks{}} % Clean out the last row's saved tokens and set maxamps

    \def\jtcd@continuerow#1[#2]{%
        \global\advance\jtcd@diagramnum1%
        \jtcd@parsediagramopts{#2}%
        %\@xp\pgfmathparse\@xp{\the\jtcd@columnskip}\show\pgfmathresult
        \@xp~\@xp[\the\jtcd@columnskip]%   \jtcd@columnskip set in \jtcd@parsediagramopts
    }

    \def\jtcd@endrow{ %
        \jtcd@prepnextrow %
        \@xp\jtcdsaved@pgfmatrixendrow %
        \the\jtcd@savedtoks %
    }

    \def\jtcd@cleanup{\global\jtcd@savedtoks{}\global\jtcd@amps=0\let\pgfmatrixendrow\jtcdsaved@pgfmatrixendrow\let\\\pgfmatrixendrow\@gobble}

    % Auxillary for \jtcd@continuerow
    \def\jtcd@parsediagramopts#1{ %
        \jtcd@columnskip{-\pgfmatrixcolumnsep+\diagramsep} % Default value of columnskip.
        \jtcd@parsediagramopts@#1,\@nil %
    }
    \def\jtcd@parsediagramopts@#1,{
        \pgfmathparse{#1}
        \ifpgfmathunitsdeclared \jtcd@columnskip{#1}\else \global\jtcd@maxamps=#1\fi %
        \@ifnextchar\@nil{\@gobble}{\jtcd@parsediagramopts@}%
    }

    % Auxillary for \jtcd@endrow and \prepBODY
    % There always will be a [num] except for when called from \prepBODY. \@ifnextchar[{}{} etc check is just so this works for \prepBODY too.  %}
    \def\jtcd@prepnextrow{\@xp\jtcd@prepnextrow@\the\jtcd@savedtoks\@nil}
    \def\jtcd@prepnextrow@{\@ifnextchar[{\jtcd@prepnextrow@@}{\jtcd@prepnextrow@@@{}}} %}
    \def\jtcd@prepnextrow@@[#1]{\jtcd@prepnextrow@@@{[#1]}}
    \def\jtcd@prepnextrow@@@#1{\@ifnextchar|{\jtcd@prepnextrow@opts#1}{\jtcd@prepnextrow@noopts#1}}
    \def\jtcd@prepnextrow@opts#1|#2|#3\@nil{\@xp\jtcd@savedtoks\@xp{\the\jtcd@rowskip|#2|\jtcd@startrow#1#3}\global\jtcd@rowskip{}}
    \def\jtcd@prepnextrow@noopts#1\@nil{\@xp\jtcd@savedtoks\@xp{\the\jtcd@rowskip\jtcd@startrow#1}\global\jtcd@rowskip{}}

    \def\jtcd@prepBODY{\@xp\jtcd@prepBODY@\BODY\@nil}
    \def\jtcd@prepBODY@#1#2\@nil{% removes the first token, checks that it actually is \diagram, and replaces it with \jtcd@startrow
        \edef\tempa{\string#1}%
        \edef\tempb{\string\diagram}%
        \ifx\tempa\tempb\else \PackageError{join-tikz-cd}{The body of the jointikzcd environment must start with a \protect\diagram}{}\fi%
        %
        \jtcd@savedtoks{#2}\jtcd@prepnextrow
    }

    \NewEnviron{cjointikzcd}[1][]{%
        \let\jtcdsaved@pgfmatrixendrow\pgfmatrixendrow\let\pgfmatrixendrow\jtcdsl %
        \let\intertext\jtcd@intertext %
        \let\@nil\jtcd@nil %
        \let\diagram\jtcd@diagram@lastrow %
        \pretocmd{\pgfmatrixnextcell}{\global\advance\jtcd@amps1}{}{} %
        \global\let~\pgfmatrixnextcell%
        \jtcd@prepBODY % since this uses \jtcd@prepnextrow, it sticks the result in jtcd@savedtoks.
        \begin{center}
        \begin{tikzcd}[#1] %
            \the\jtcd@savedtoks\diagram\@nil %
        \end{tikzcd} %
        \end{center} %
    }
}

\def\cjointikzcd{\catcode`&=\active \Collect@Body \env@cjointikzcd@parse}
